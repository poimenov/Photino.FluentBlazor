@page "/weather"
@attribute [StreamRendering]
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Logging
@inject IStringLocalizer<Weather> localizer
@inject ILogger<Weather> logger

<h1>@localizer["Header"]</h1>

<p>@localizer["Text"]</p>

@if (forecasts == null)
{
    <p><em>@localizer["Loading"]...</em></p>
}
else
{
    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="weathergrid" Items="@forecasts" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem="WeatherForecast">
        <PropertyColumn Title="@localizer["Date"]" Property="@(c => c!.Date)" Align="Align.Start" />
        <PropertyColumn Title="@localizer["TempC"]" Property="@(c => c!.TemperatureC)" Align="Align.Center" />
        <PropertyColumn Title="@localizer["TempF"]" Property="@(c => c!.TemperatureF)" Align="Align.Center" />
        <PropertyColumn Title="@localizer["Summary"]" Property="@(c => c!.Summary)" Align="Align.End" />
    </FluentDataGrid>
}

@code {
    private IQueryable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering",
"Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).AsQueryable();
        logger.LogInformation("Weather data loaded.");
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
